function Z = calculateICESwapRate(snapshots,previousDayRate)
% Define constants
PERCENTILE_LOW = 25;
PERCENTILE_HIGH = 75;

% ------------------------------------------------------------------------
%
% 1. Calculate VWAMP for each snapshot
% advanced matlab code vwamps = arrayfun(@(s) calculateVWAMP(s), snapshots);

numSnapshots = length(snapshots);
vwamps = zeros(1, numSnapshots); % Pre-allocate memory for efficiency
for i = 1:numSnapshots
    [vwb(i),vwo(i),vwamp(i)] = calculateVWAMP(snapshots(i));
end



% ------------------------------------------------------------------------
%
% 2. Discard illiquid or crossed/zero spread snapshots
validIndices = arrayfun(@(s) isValidSnapshot(s), snapshots);
vwampsIliquid = vwamps(validIndices);
if is
% ------------------------------------------------------------------------
%
% 3. Discard outlier snapshots
lowerBound = prctile(vwamps, PERCENTILE_LOW);
upperBound = prctile(vwamps, PERCENTILE_HIGH);

fix_graphBound;

vwampsOutlier = vwamps(vwamps >= lowerBound & vwamps <= upperBound);

% ------------------------------------------------------------------------
%
% 4. Calculate the quality-weighted ICE Swap Rate
if numel(vwamps) >= 2
    qualityWeights = arrayfun(@(s) calculateQualityWeight(s), snapshots(validIndices));
    iceSwapRate = sum(vwamps .* qualityWeights(1:size(vwamps,2)) ) / sum(qualityWeights(1:size(vwamps,2)));
else
    % 5. Use movement interpolation if not enough liquid snapshots
    iceSwapRate = interpolateMovement(previousDayRate, vwamps);
end

Z=[vwb vwo vwamp vwampsIliquid vwampsOutlier];

end
